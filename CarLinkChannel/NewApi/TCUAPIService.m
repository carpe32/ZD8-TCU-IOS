//
//  TCUAPIService.m
//  ZD8-TCU
//
//  iOS APIÊúçÂä° - ÂÆåÊï¥‰øÆÂ§çÁâàÔºàÊó†ÈúÄ‰øÆÊîπÊúçÂä°Âô®Ôºâ
//

#import "TCUAPIService.h"
#import "TCUSSLManager.h"
#import "TCUAPIConfig.h"
#import "TCUStreamBasedRequest.h"

@interface TCUAPIService () <NSURLSessionDelegate, NSURLSessionTaskDelegate>

@property (nonatomic, strong) NSURLSession *urlSession;
@property (nonatomic, strong) TCUSSLManager *sslManager;
@property (nonatomic, strong) NSOperationQueue *delegateQueue;

@end

@implementation TCUAPIService

#pragma mark - Singleton

+ (instancetype)sharedService {
    static TCUAPIService *sharedInstance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        sharedInstance = [[self alloc] init];
    });
    return sharedInstance;
}

- (instancetype)init {
    self = [super init];
    if (self) {
        _sslManager = [[TCUSSLManager alloc] init];
        _delegateQueue = [[NSOperationQueue alloc] init];
        _delegateQueue.maxConcurrentOperationCount = 1;
        _delegateQueue.name = @"com.tcu.api.delegate";
        
        [self setupURLSession];
    }
    return self;
}

#pragma mark - SSL Configuration

- (BOOL)setupSSLWithCertName:(NSString *)certName password:(NSString *)password {
    
    TCUAPILog(@"üîê ÈÖçÁΩÆSSLËØÅ‰π¶");
    TCUAPILog(@"   ËØÅ‰π¶ÂêçÁß∞: %@", certName);
    
    BOOL success = [self.sslManager loadCertificateFromP12:certName password:password];
    
    if (success) {
        TCUAPILog(@"‚úÖ SSLËØÅ‰π¶ÈÖçÁΩÆÊàêÂäü");
        // ÈáçÊñ∞ÂàõÂª∫URLSession‰ª•Â∫îÁî®Êñ∞ËØÅ‰π¶
        [self setupURLSession];
    } else {
        TCUAPILogError(@"‚ùå SSLÈÖçÁΩÆÂ§±Ë¥•");
    }
    
    return success;
}

- (BOOL)isSSLConfigured {
    return [self.sslManager isConfigured];
}

#pragma mark - URLSession Setup

- (void)setupURLSession {
    
    // Â¶ÇÊûúÂ∑≤Â≠òÂú®sessionÔºåÂÖàÂ§±Êïà
    if (self.urlSession) {
        [self.urlSession invalidateAndCancel];
        self.urlSession = nil;
    }
    
    NSURLSessionConfiguration *config = [NSURLSessionConfiguration defaultSessionConfiguration];
    
    // ‚úÖ ÂÖ≥ÈîÆ‰øÆÂ§ç1ÔºöÂº∫Âà∂‰ΩøÁî®HTTP/1.1ÔºàÈÅøÂÖçHTTP/2ÁöÑÂÆ¢Êà∑Á´ØËØÅ‰π¶bugÔºâ
    config.HTTPShouldUsePipelining = NO;
    config.HTTPMaximumConnectionsPerHost = 1;
    
    // ‚úÖ ÂÖ≥ÈîÆ‰øÆÂ§ç2ÔºöË∂ÖÊó∂ËÆæÁΩÆ
    config.timeoutIntervalForRequest = 30.0;
    config.timeoutIntervalForResource = 60.0;
    
    // ‚úÖ ÂÖ≥ÈîÆ‰øÆÂ§ç3ÔºöÁ¶ÅÁî®ÁºìÂ≠òÔºàÁ°Æ‰øùÊØèÊ¨°ÈÉΩËøõË°åËØÅ‰π¶ËÆ§ËØÅÔºâ
    config.URLCache = nil;
    config.requestCachePolicy = NSURLRequestReloadIgnoringLocalCacheData;
    
    // ‚úÖ ÂÖ≥ÈîÆ‰øÆÂ§ç4ÔºöTLSÈÖçÁΩÆ
    config.TLSMinimumSupportedProtocolVersion = tls_protocol_version_TLSv12;
    config.TLSMaximumSupportedProtocolVersion = tls_protocol_version_TLSv13;
    
    // ËØ∑Ê±ÇÂ§¥
    config.HTTPAdditionalHeaders = @{
        @"Content-Type": @"application/json",
        @"Accept": @"application/json"
    };
    
    // ‚úÖ ÂÖ≥ÈîÆ‰øÆÂ§ç5ÔºöÈ¢ÑÂÖàÈÖçÁΩÆÂÆ¢Êà∑Á´ØËØÅ‰π¶Âà∞ URLCredentialStorage
    if ([self.sslManager isConfigured]) {
        [self configureClientCertificateForDomain:@"zendao8.top"];
    }
    
    // ‚úÖ ÂÖ≥ÈîÆ‰øÆÂ§ç6Ôºö‰ΩøÁî®Ëá™ÂÆö‰πâdelegateQueue
    self.urlSession = [NSURLSession sessionWithConfiguration:config
                                                    delegate:self
                                               delegateQueue:self.delegateQueue];
    
    TCUAPILog(@"‚úÖ URLSessionÂ∑≤ÈÖçÁΩÆÔºàÂº∫Âà∂ÂÆ¢Êà∑Á´ØËØÅ‰π¶Ê®°ÂºèÔºâ");
}

#pragma mark - Certificate Configuration

- (void)configureClientCertificateForDomain:(NSString *)domain {
    NSURLCredential *credential = [self.sslManager createCredential];
    if (!credential) {
        TCUAPILogError(@"‚ùå Êó†Ê≥ïÂàõÂª∫ÂÆ¢Êà∑Á´ØËØÅ‰π¶Âá≠ÊçÆ");
        return;
    }
    
    // ‚úÖ ‰∏∫ÊâÄÊúâÂèØËÉΩÁöÑËÆ§ËØÅÊñπÊ≥ïËÆæÁΩÆÈªòËÆ§Âá≠ÊçÆ
    NSArray *authMethods = @[
        NSURLAuthenticationMethodClientCertificate,
        NSURLAuthenticationMethodServerTrust,
        NSURLAuthenticationMethodDefault
    ];
    
    for (NSString *authMethod in authMethods) {
        NSURLProtectionSpace *protectionSpace = [[NSURLProtectionSpace alloc]
            initWithHost:domain
            port:443
            protocol:@"https"
            realm:nil
            authenticationMethod:authMethod];
        
        [[NSURLCredentialStorage sharedCredentialStorage]
            setDefaultCredential:credential
            forProtectionSpace:protectionSpace];
        
        TCUAPILog(@"‚úì Â∑≤‰∏∫ %@ ËÆæÁΩÆËØÅ‰π¶Âá≠ÊçÆ",
                 [authMethod stringByReplacingOccurrencesOfString:@"NSURLAuthenticationMethod" withString:@""]);
    }
}

#pragma mark - API Methods

- (void)GET:(NSURL *)url
 parameters:(NSDictionary *)parameters
 completion:(void(^)(id _Nullable responseObject, NSError * _Nullable error))completion {
    
    // ÊûÑÂª∫URLÂèÇÊï∞
    NSMutableString *urlString = [url.absoluteString mutableCopy];
    if (parameters && parameters.count > 0) {
        [urlString appendString:@"?"];
        NSMutableArray *pairs = [NSMutableArray array];
        for (NSString *key in parameters) {
            NSString *value = [parameters[key] description];
            NSString *escapedValue = [value stringByAddingPercentEncodingWithAllowedCharacters:
                                     [NSCharacterSet URLQueryAllowedCharacterSet]];
            [pairs addObject:[NSString stringWithFormat:@"%@=%@", key, escapedValue]];
        }
        [urlString appendString:[pairs componentsJoinedByString:@"&"]];
    }
    
    NSURL *requestURL = [NSURL URLWithString:urlString];
    
    TCUAPILog(@"üì§ GETËØ∑Ê±Ç: %@", requestURL.absoluteString);
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:requestURL];
    request.HTTPMethod = @"GET";
    
    // ‚úÖ Âº∫Âà∂‰ΩøÁî®HTTP/1.1
    [request setValue:@"keep-alive" forHTTPHeaderField:@"Connection"];
    
    [self performRequest:request completion:completion];
}

- (void)POST:(NSURL *)url
  parameters:(NSDictionary *)parameters
  completion:(void(^)(id _Nullable responseObject, NSError * _Nullable error))completion {
    
    TCUAPILog(@"üì§ POSTËØ∑Ê±Ç: %@", url.absoluteString);
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    request.HTTPMethod = @"POST";
    [request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [request setValue:@"keep-alive" forHTTPHeaderField:@"Connection"];
    
    if (parameters) {
        NSError *jsonError = nil;
        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:parameters
                                                          options:0
                                                            error:&jsonError];
        if (jsonError) {
            TCUAPILogError(@"‚ùå JSONÂ∫èÂàóÂåñÂ§±Ë¥•: %@", jsonError.localizedDescription);
            if (completion) {
                completion(nil, jsonError);
            }
            return;
        }
        request.HTTPBody = jsonData;
    }
    
    [self performRequest:request completion:completion];
}

- (void)PUT:(NSURL *)url
 parameters:(NSDictionary *)parameters
 completion:(void(^)(id _Nullable responseObject, NSError * _Nullable error))completion {
    
    TCUAPILog(@"üì§ PUTËØ∑Ê±Ç: %@", url.absoluteString);
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    request.HTTPMethod = @"PUT";
    [request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [request setValue:@"keep-alive" forHTTPHeaderField:@"Connection"];
    
    if (parameters) {
        NSError *jsonError = nil;
        NSData *jsonData = [NSJSONSerialization dataWithJSONObject:parameters
                                                          options:0
                                                            error:&jsonError];
        if (jsonError) {
            TCUAPILogError(@"‚ùå JSONÂ∫èÂàóÂåñÂ§±Ë¥•: %@", jsonError.localizedDescription);
            if (completion) {
                completion(nil, jsonError);
            }
            return;
        }
        request.HTTPBody = jsonData;
    }
    
    [self performRequest:request completion:completion];
}

- (void)DELETE:(NSURL *)url
    completion:(void(^)(id _Nullable responseObject, NSError * _Nullable error))completion {
    
    TCUAPILog(@"üì§ DELETEËØ∑Ê±Ç: %@", url.absoluteString);
    
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
    request.HTTPMethod = @"DELETE";
    [request setValue:@"keep-alive" forHTTPHeaderField:@"Connection"];
    
    [self performRequest:request completion:completion];
}

#pragma mark - Private Methods
- (void)performRequest:(NSURLRequest *)request
            completion:(void(^)(id _Nullable responseObject, NSError * _Nullable error))completion {
    
    if (![self.sslManager isConfigured]) {
        TCUAPILogError(@"‚ùå SSLËØÅ‰π¶Êú™ÈÖçÁΩÆ");
        NSError *error = [NSError errorWithDomain:@"TCUAPIService"
                                            code:-1
                                        userInfo:@{NSLocalizedDescriptionKey: @"SSL not configured"}];
        if (completion) completion(nil, error);
        return;
    }
    
    TCUAPILog(@"üöÄ ÂºÄÂßãËØ∑Ê±ÇÔºà‰ΩøÁî® Stream Ê®°ÂºèÔºåÂº∫Âà∂ÂèëÈÄÅËØÅ‰π¶Ôºâ");
    
    // ‚úÖ ‰ΩøÁî® Stream API ÊâßË°åËØ∑Ê±Ç
    [TCUStreamBasedRequest performRequest:request
                             withIdentity:self.sslManager.identity
                               completion:^(NSData *data, NSHTTPURLResponse *response, NSError *error) {
        
        if (error) {
            TCUAPILogError(@"‚ùå ËØ∑Ê±ÇÂ§±Ë¥•: %@", error.localizedDescription);
            TCUAPILogError(@"   ÈîôËØØÁ†Å: %ld", (long)error.code);
            
            if (completion) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    completion(nil, error);
                });
            }
            return;
        }
        
        NSInteger statusCode = response.statusCode;
        TCUAPILog(@"üì• ÂìçÂ∫î: %ld", (long)statusCode);
        
        if (statusCode < 200 || statusCode >= 300) {
            TCUAPILogError(@"‚ùå HTTPÈîôËØØ: %ld", (long)statusCode);
            
            NSString *errorMsg = [NSString stringWithFormat:@"HTTP %ld", (long)statusCode];
            if (data) {
                NSString *responseStr = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
                if (responseStr) {
                    TCUAPILogError(@"ÂìçÂ∫îÂÜÖÂÆπ: %@", responseStr);
                }
            }
            
            NSError *httpError = [NSError errorWithDomain:@"TCUAPIService"
                                                    code:statusCode
                                                userInfo:@{NSLocalizedDescriptionKey: errorMsg}];
            if (completion) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    completion(nil, httpError);
                });
            }
            return;
        }
        
        // Ëß£Êûê JSON
        if (!data || data.length == 0) {
            TCUAPILog(@"‚úÖ ËØ∑Ê±ÇÊàêÂäüÔºàÊó†ÂìçÂ∫î‰ΩìÔºâ");
            if (completion) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    completion(nil, nil);
                });
            }
            return;
        }
        
        NSError *jsonError = nil;
        id responseObject = [NSJSONSerialization JSONObjectWithData:data
                                                           options:0
                                                             error:&jsonError];
        
        if (jsonError) {
            TCUAPILogError(@"‚ùå JSONËß£ÊûêÂ§±Ë¥•");
            if (completion) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    completion(nil, jsonError);
                });
            }
            return;
        }
        
        TCUAPILog(@"‚úÖ ËØ∑Ê±ÇÊàêÂäü");
        
        if (completion) {
            dispatch_async(dispatch_get_main_queue(), ^{
                completion(responseObject, nil);
            });
        }
    }];
}

#pragma mark - NSURLSessionDelegate

// ‚úÖ ÂÖ≥ÈîÆ‰øÆÂ§ç7ÔºöÂÆûÁé∞ÊúçÂä°Âô®‰ø°‰ªªÈ™åËØÅÂíåÂÆ¢Êà∑Á´ØËØÅ‰π¶Êèê‰æõ
- (void)URLSession:(NSURLSession *)session
didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
 completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler {
    
    TCUAPILog(@"üîê ËÆ§ËØÅÊåëÊàò: %@", challenge.protectionSpace.authenticationMethod);
    
    // Â§ÑÁêÜÂÆ¢Êà∑Á´ØËØÅ‰π¶ËÆ§ËØÅ
    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodClientCertificate]) {
        TCUAPILog(@"üìã ÊúçÂä°Âô®ËØ∑Ê±ÇÂÆ¢Êà∑Á´ØËØÅ‰π¶");
        
        if (![self.sslManager isConfigured]) {
            TCUAPILogError(@"‚ùå ËØÅ‰π¶Êú™ÈÖçÁΩÆ");
            completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge, nil);
            return;
        }
        
        // ÂàõÂª∫Âá≠ÊçÆ
        NSURLCredential *credential = [self.sslManager createCredential];
        
        if (credential) {
            TCUAPILog(@"‚úÖ Êèê‰æõÂÆ¢Êà∑Á´ØËØÅ‰π¶");
            completionHandler(NSURLSessionAuthChallengeUseCredential, credential);
        } else {
            TCUAPILogError(@"‚ùå Êó†Ê≥ïÂàõÂª∫ËØÅ‰π¶Âá≠ÊçÆ");
            completionHandler(NSURLSessionAuthChallengeCancelAuthenticationChallenge, nil);
        }
        return;
    }
    
    // Â§ÑÁêÜÊúçÂä°Âô®‰ø°‰ªªÈ™åËØÅ
    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {
        TCUAPILog(@"üîí È™åËØÅÊúçÂä°Âô®ËØÅ‰π¶");
        
        SecTrustRef serverTrust = challenge.protectionSpace.serverTrust;
        
        // ‚úÖ ÂØπ‰∫éËá™Á≠æÂêçËØÅ‰π¶ÔºåÂèØ‰ª•ÈÄâÊã©‰ø°‰ªª
        NSURLCredential *credential = [NSURLCredential credentialForTrust:serverTrust];
        TCUAPILog(@"‚úÖ Êé•ÂèóÊúçÂä°Âô®ËØÅ‰π¶");
        completionHandler(NSURLSessionAuthChallengeUseCredential, credential);
        return;
    }
    
    // ‚úÖ Â§ÑÁêÜÈªòËÆ§ËÆ§ËØÅÊñπÊ≥ï - ‰πüÂ∞ùËØïÊèê‰æõÂÆ¢Êà∑Á´ØËØÅ‰π¶
    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodDefault]) {
        TCUAPILog(@"üìã ÈªòËÆ§ËÆ§ËØÅÊñπÊ≥ï");
        
        if ([self.sslManager isConfigured]) {
            NSURLCredential *credential = [self.sslManager createCredential];
            if (credential) {
                TCUAPILog(@"‚úÖ Â∞ùËØïÊèê‰æõÂÆ¢Êà∑Á´ØËØÅ‰π¶");
                completionHandler(NSURLSessionAuthChallengeUseCredential, credential);
                return;
            }
        }
    }
    
    // ÂÖ∂‰ªñËÆ§ËØÅÊñπÂºè‰ΩøÁî®ÈªòËÆ§Â§ÑÁêÜ
    TCUAPILog(@"‚ö†Ô∏è ‰ΩøÁî®ÈªòËÆ§ËÆ§ËØÅÂ§ÑÁêÜ");
    completionHandler(NSURLSessionAuthChallengePerformDefaultHandling, nil);
}

#pragma mark - NSURLSessionTaskDelegate

// ‚úÖ Âú®TaskÁ∫ßÂà´‰πüÂ§ÑÁêÜËÆ§ËØÅÔºàÂèåÈáç‰øùÈô©Ôºâ
- (void)URLSession:(NSURLSession *)session
              task:(NSURLSessionTask *)task
didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
 completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition, NSURLCredential *))completionHandler {
    
    TCUAPILog(@"üîê [Task] ËÆ§ËØÅÊåëÊàò: %@", challenge.protectionSpace.authenticationMethod);
    
    // ÂÆ¢Êà∑Á´ØËØÅ‰π¶
    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodClientCertificate]) {
        NSURLCredential *credential = [self.sslManager createCredential];
        if (credential) {
            TCUAPILog(@"‚úÖ [Task] Êèê‰æõÂÆ¢Êà∑Á´ØËØÅ‰π¶");
            completionHandler(NSURLSessionAuthChallengeUseCredential, credential);
            return;
        }
    }
    
    // ÊúçÂä°Âô®‰ø°‰ªª
    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {
        NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];
        TCUAPILog(@"‚úÖ [Task] Êé•ÂèóÊúçÂä°Âô®ËØÅ‰π¶");
        completionHandler(NSURLSessionAuthChallengeUseCredential, credential);
        return;
    }
    
    // Ë∞ÉÁî® session Á∫ßÂà´ÁöÑÂ§ÑÁêÜ
    [self URLSession:session didReceiveChallenge:challenge completionHandler:completionHandler];
}

#pragma mark - Testing
- (void)testConnection {
    TCUAPILog(@"========== ÂºÄÂßãËøûÊé•ÊµãËØï ==========");
    
    if (![self.sslManager isConfigured]) {
        TCUAPILogError(@"‚ùå ÊµãËØïÂ§±Ë¥•ÔºöSSLËØÅ‰π¶Êú™ÈÖçÁΩÆ");
        return;
    }
    
    NSURL *testURL = API_URL(API_VEHICLE_INFO);
    TCUAPILog(@"ÊµãËØïURL: %@", testURL.absoluteString);
    
    // ‚úÖ Êîπ‰∏∫ POSTÔºåÂπ∂Êèê‰æõÂøÖÈúÄÁöÑÂèÇÊï∞
    NSDictionary *testData = @{
        @"vin": @"WBA8X9108LGM47279",
        @"hwid": @"IOS_Device",
        @"platform": @(1),  // 1 = iOS
        @"svt": @{
            @"test_key": @"test_value"
        },
        @"cafd": @{}
    };
    
    [self POST:testURL parameters:testData completion:^(id responseObject, NSError *error) {
        if (error) {
            TCUAPILogError(@"‚ùå ÊµãËØïÂ§±Ë¥•: %@", error.localizedDescription);
        } else {
            TCUAPILog(@"‚úÖ ÊµãËØïÊàêÂäü");
            if (responseObject) {
                TCUAPILog(@"ÂìçÂ∫î: %@", responseObject);
            }
        }
        TCUAPILog(@"========== ÊµãËØïÂÆåÊàê ==========");
    }];
}

@end
